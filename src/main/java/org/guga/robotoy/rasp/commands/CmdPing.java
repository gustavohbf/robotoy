/*******************************************************************************
 * Copyright 2016 See https://github.com/gustavohbf/robotoy/blob/master/AUTHORS file.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package org.guga.robotoy.rasp.commands;

import org.guga.robotoy.rasp.controller.RoboToyServerContext;
import org.guga.robotoy.rasp.controller.RoboToyServerController;
import org.guga.robotoy.rasp.game.GamePlayer;
import org.guga.robotoy.rasp.network.WebSocketActiveSession;
import org.guga.robotoy.rasp.statistics.RoboToyStatistics;
import org.guga.robotoy.rasp.utils.JSONUtils;

/**
 * Implements a simple 'PING' method.<BR>
 * <BR>
 * When server wants to PING a player, it submits the following message:<BR>
 * <pre>
 * {"ping":XXXXXX,"count":0}
 * </pre>
 * Where XXXXXX is a timestamp measured in server side.<BR>
 * Client should reply the same message after incrementing 'count':<BR>
 * <pre>
 * {"ping":XXXXXX,"count":1}
 * </pre>
 * Server will then compute the time elapsed comparing its current timestamp with XXXXXX.<BR>
 * If it detects a significant change (compared to 'MIN_PING_DIFF_TO_BROADCAST_CHANGE'), it will
 * broadcast to all connected players and robots the following message:<BR>
 * <pre>
 * {"updateping":DDDDDD,"player":{"name":"XXXXXXX","address":"NN.NN.NN.NN"}}
 * </pre>
 * This way, players and other robots can update its local databases with the delayed DDDDDD time
 * measured between robot and player.<BR>
 * <BR>
 * As an alternative route, a player can also fire a PING event to a robot by submitting
 * a message prepended with letter 'p', such as:<BR>
 * <pre>
 * p{"ping":XXXXXX,"count":0}
 * </pre>
 * In this case, robot will just reply after increasing 'count':<BR>
 * <pre>
 * {"ping":XXXXXX,"count":1}
 * </pre>
 * <BR>
 * @author Gustavo Figueiredo
 *
 */
public class CmdPing implements CommandWithBroadcast<CmdPing.UpdatePing> {
	
	private static final long MIN_PING_DIFF_TO_BROADCAST_CHANGE = 10;

	public static void pingPlayer(GamePlayer player,RoboToyServerContext context) {
		if (context==null || context.getWebSocketPool()==null)
			return;
		if (player==null || player.getAddressString()==null)
			return;
		StringBuilder message = new StringBuilder();
		message.append("{\"ping\":");
		message.append(System.currentTimeMillis());
		message.append(",\"count\":0}");
		try {
			context.getWebSocketPool().sendMessage(player.getAddressString(), player.getPort(), message.toString());
		} catch (Exception e) {
			// It's common to fail if player got disconnected
		}		
	}

	@Override
	public boolean isParseable(CommandIssuer issuer,String message) {
		switch (issuer) {
		case PLAYER:
			return (message.length()>0 
				&& (message.charAt(0)==RoboToyServerController.PING // generated remotelly
					|| message.startsWith("{\"ping\""))); // generated locally
		case ROBOT:
			return (message.startsWith("{\"updateping\"")); // generated by another robot
		default:
			return false;
		}
	}

	@Override
	public Object parseMessage(CommandIssuer issuer,RoboToyServerContext context,String message,WebSocketActiveSession session) throws Exception {
		if (CommandIssuer.PLAYER.equals(issuer)) {
			UpdatePing broadcast_msg = null;
			if (message.startsWith("{\"ping\"")){
				// parse message replied to another message generated locally
				PingMessage ping = JSONUtils.fromJSON(message, PingMessage.class);
				if (ping!=null) {
					long now = System.currentTimeMillis();
					long start = ping.getPing();
					long elapsed = (now-start);
					String player_name = RoboToyServerContext.getPlayerName(session);
					if (player_name==null)
						throw new Exception("Session '"+session.getSessionId()+"' is not related to an identified player!");
					GamePlayer player = context.getGame().findPlayerWithName(player_name);
					if (player!=null) {
						long prev_ping = player.getPing();
						player.setPing(elapsed);
						if (context.isTakeStatistics()) {
							RoboToyStatistics.addLagStatsForIPAddress(session.getHost(), elapsed);
						}
						if (Math.abs(prev_ping-elapsed)>MIN_PING_DIFF_TO_BROADCAST_CHANGE) {
							broadcast_msg = new UpdatePing();
							broadcast_msg.setPlayer(PlayerSummary.fromPlayer(player));
							broadcast_msg.setUpdateping(elapsed);
						}
					}
				}
			}
			return broadcast_msg;
		}
		if (CommandIssuer.ROBOT.equals(issuer)) {
			if (message.startsWith("{\"updateping\"")){
				// parse message sent by some robot
				UpdatePing updateping = JSONUtils.fromJSON(message, UpdatePing.class);
				if (updateping!=null) {
					PlayerSummary playerSummary = updateping.getPlayer();
					if (playerSummary!=null && playerSummary.getName()!=null) {
						GamePlayer player = context.getGame().findPlayerWithName(playerSummary.getName());
						if (player!=null) {
							long elapsed = updateping.getUpdateping();
							player.setPing(elapsed);
							if (context.isTakeStatistics()) {
								RoboToyStatistics.addLagStatsForIPAddress(player.getAddressString(), elapsed);
							}
						}
					}
				}
			}	
		}
		return null;
	}

	/**
	 * After a call to 'parseMessage', this method will be called to get some custom reply to the caller.
	 * @param parsedMessage Returned value from previous parseMessage call 
	 */
	@Override
	public String getReply(CommandIssuer issuer,RoboToyServerContext context,String message,WebSocketActiveSession session,Object parsedMessage) {
		if (!CommandIssuer.PLAYER.equals(issuer)) {
			return null;
		}
		if (message.length()>3 
				&& message.charAt(0)==RoboToyServerController.PING
				&& message.charAt(1)=='{'
				&& message.charAt(message.length()-1)=='}') {
			// reply to message generated remotelly
			PingMessage ping = JSONUtils.fromJSON(message.substring(1), PingMessage.class);
			if (ping!=null) {
				ping.count++;
				return JSONUtils.toJSON(ping, false);
			}
		}
		return null; 
	}

	@Override
	public String getBroadcastMessage(RoboToyServerContext context, UpdatePing object) {
		StringBuilder to_broadcast = new StringBuilder();
		to_broadcast.append("{\"updateping\":");
		to_broadcast.append(object.getUpdateping());
		to_broadcast.append(",\"player\":");
		to_broadcast.append(object.getPlayer().getPlayerInfo());
		to_broadcast.append("}");
		return to_broadcast.toString();
	}

	public static class PingMessage {
		private long ping;
		private int count;		
		public long getPing() {
			return ping;
		}
		public void setPing(long ping) {
			this.ping = ping;
		}
		public int getCount() {
			return count;
		}
		public void setCount(int count) {
			this.count = count;
		}			
	}
	
	public static class UpdatePing {
		private long updateping;
		private PlayerSummary player;
		public long getUpdateping() {
			return updateping;
		}
		public void setUpdateping(long updateping) {
			this.updateping = updateping;
		}
		public PlayerSummary getPlayer() {
			return player;
		}
		public void setPlayer(PlayerSummary player) {
			this.player = player;
		}		
	}

}
