// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the eclipse plugin in order to be able to generate Eclipse project files on demand
apply plugin: 'eclipse'

// Apply the application plugin in order to make it easy to create an executable application
apply plugin: 'application'

sourceCompatibility = 1.8
version = '1.0'
mainClassName = "org.guga.robotoy.rasp.RaspMain"

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    //compile 'org.slf4j:slf4j-api:1.7.13'
    
    // The production code uses the BouncyCastle API for providing encryption features associated
    // to the HTTPS protocol
    compile 'org.bouncycastle:bcprov-jdk15on:1.52'
    compile 'org.bouncycastle:bcmail-jdk15on:1.52'
    compile 'org.bouncycastle:bcpkix-jdk15on:1.52'
    
    // The production code uses Pi4J (a Java port for the Wiring Pi C library). It's an GPIO interface
    // library for the Raspberry Pi
    compile 'com.pi4j:pi4j-core:1.1'
    compile 'com.pi4j:pi4j-device:1.1'
    compile 'com.pi4j:pi4j-gpio-extension:1.1'
    compile 'com.pi4j:pi4j-service:1.1'
    
    // The production code uses Google implementation of JSON format for Java applications
    compile 'com.google.code.gson:gson:2.7'
    
    // The production code uses JETTY server for embedding a web application server
    compile 'org.eclipse.jetty:jetty-server:9.3.14.v20161028'
    compile 'org.eclipse.jetty:jetty-webapp:9.3.14.v20161028'
    compile 'org.eclipse.jetty:apache-jsp:9.3.14.v20161028'
    compile 'org.eclipse.jetty:apache-jstl:9.3.14.v20161028'
    compile 'org.eclipse.jetty:jetty-servlet:9.3.14.v20161028'
    compile 'org.eclipse.jetty:jetty-annotations:9.3.14.v20161028'
    compile 'org.eclipse.jetty:jetty-plus:9.3.14.v20161028'
    compile 'org.eclipse.jetty.websocket:websocket-server:9.3.14.v20161028'
    compile 'org.eclipse.jetty.websocket:websocket-client:9.3.14.v20161028'
    compile 'org.eclipse.jdt.core.compiler:ecj:4.6.1'
    
    // The production code uses JSTL for its embedded web application server
    compile 'javax.servlet:jstl:1.2'
    
    // The production code uses Apache Commons Lang (e.g. StringEscapeUtils)
    compile 'commons-lang:commons-lang:2.6'
    
    // Some external JAR's that can't be found in Maven repository (e.g.: RXTX)
    compile fileTree(dir: 'lib', include: ['*.jar'])

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

jar {
	from('src/main/java') {
		include 'org/guga/robotoy/rasp/res/**/*'
	}
    manifest {
        attributes 'Implementation-Title': 'RoboToy',
                   'Implementation-Version': version
    }
}

startScripts {
	applicationName = "robotoy"
	
	// Adds additional JVM parameters that are dependent to each platform
	doLast {
        unixScript.text = unixScript.text.replaceFirst('(?<=DEFAULT_JVM_OPTS=)(?>\'|\")(.*)(?>\'|")(?=\n)',
        		'\'$1 "-Djava.util.logging.config.file=\\$APP_HOME/conf/logging.properties" "-Djava.library.path=/usr/lib/jni"\'')
        windowsScript.text = windowsScript.text.replaceFirst('(?<=DEFAULT_JVM_OPTS=)(.*)(?=\r\n)',
                '$1 "-Djava.util.logging.config.file=%~dp0../conf/logging.properties"')
    }
}

distTar {
	baseName = 'robotoy'
	extension = 'tar.gz'
	// Little customization in order to allow root name inside archive to be different
	// from the archive filename
	def versionedArchiveName = "${destinationDir}/${baseName}-${version}.${extension}"
	version = null
	compression = Compression.GZIP
	into("${baseName}/conf") {
		from ('conf/logging.properties')
		from ('conf/config.properties')
	}
	into("${baseName}/bin") {
		from ('scripts/robotoy_service.sh') {
			fileMode 0755
		}
	}
	doLast {
		delete(versionedArchiveName);
		archivePath.renameTo(versionedArchiveName)
	}
}

distZip {
	baseName = 'robotoy'
	// Little customization in order to allow root name inside archive to be different
	// from the archive filename
	def versionedArchiveName = "${destinationDir}/${baseName}-${version}.${extension}"
	version = null
	into("${baseName}/conf") {
		from ('conf/logging.properties')
		from ('conf/config.properties')
	}
	into("${baseName}/bin") {
		from ('scripts/robotoy_service.sh') {
			fileMode 0755
		}
	}
	doLast {
		delete(versionedArchiveName);
		archivePath.renameTo(versionedArchiveName)
	}
}
